<?php
/**
 * @file
 * This module handles the authentication of user when required by Ezproxy.
 *
 * When user are correctly authenticated the control are returned to Ezproxy
 * with construct of a Ticket-url.
 */

include_once 'ting_ezproxy.features.inc';

define('TING_EZPROXY_AUTHENTICATION_URL', 'ting_ezproxy_authentication');

/**
 * Implements hook_menu().
 */
function ting_ezproxy_menu() {
  $items = array();

  $items['admin/config/ting/ezproxy'] = array(
    'title' => 'EZproxy settings',
    'description' => 'Configure EZproxy authenticaton',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_ezproxy_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_ezproxy.admin.inc',
    'weight' => 10,
  );

  $items[TING_EZPROXY_AUTHENTICATION_URL] = array(
    'title' => 'Ezproxy authentication',
    'description' => 'EZProxy menu callback to handle authentication',
    'page callback' => 'ting_ezproxy_handler',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback that handles authentication of the current logged in users.
 */
function ting_ezproxy_handler() {
  // Get config values.
  $configuration = variable_get('ting_ezproxy', array());
  if (empty($configuration)) {
    drupal_set_message(t('The EZproxy module have not been configured. Please contact the site administrator.'), 'warning');
    return FALSE;
  }

  if (user_is_anonymous()) {
    // Get the user login form.
    $form = drupal_get_form('ting_ezproxy_user_login_form');

    // Get text and replace token.
    $text = strtr($configuration['text_anonymous'], array('@loginform' => render($form)));
  }
  else {
    // User is logged in.
    $status = ting_ezproxy_user_status($configuration['category'], $configuration['block']);

    if ($status) {
      // Get url from EZproxy
      // The content will be encoded in The EZproxy way eg. "ezp.2aH...s-" -
      // it's not a real url in this context.
      $url = $_GET['url'];

      // Make the EZproxy url with ticket using a non-critical id (uid).
      $url_redirect  = ting_ezproxy_generate_ticket($url);

      $waittime = intval($configuration['loggedin_time']);
      if ($waittime == 0) {
        drupal_goto($url_redirect);
      }
      else {
        // Get text and replace token with url.
        $text = strtr($configuration['text_loggedin'], array('@tokenurl' => $url_redirect));

        if ($waittime > 0) {
          drupal_add_html_head(array(
            '#tag' => 'meta',
            '#attributes' => array(
              'http-equiv' => 'refresh',
              'content' => $waittime . ';url=' . $url_redirect,
            ),
          ), 'exproxy');
        }
      }
    }
    elseif ($status === FALSE) {
      // Blocked or other error.
      $text = $configuration['text_error'];
    }
    else {
      // Wrong category.
      $text = $configuration['text_wrongcategory'];
    }
  }

  return '<div class="ting-ezproxy">' . $text . '</div>';
}

/**
 * Implements hook_form().
 *
 * Wrapper for the user login form to get around default redirect to the users
 * profile page.
 */
function ting_ezproxy_user_login_form() {
  $form_id = 'user_login';

  // Build basic form_state or drupal_retrieve_form() will only return the
  // form_id and not the form elements.
  $form_state = array();
  $form_state += form_state_defaults();

  // Get user login form.
  $form = drupal_retrieve_form($form_id, $form_state);

  $form['#submit'] = array('ting_ezproxy_user_login_submit');

  // Run hook_form_alter() and hook_form_FORM_ID_alter() functions to give other
  // modules a change to update the form.
  $hooks = array('form');
  $hooks[] = 'form_' . $form_id;
  drupal_alter($hooks, $form, $form_state, $form_id);

  return $form;
}

/**
 * Submit handler for the form wrapper above to get around redirects.
 */
function ting_ezproxy_user_login_submit($form, &$form_state) {
  global $user;
  $user = user_load($form_state['uid']);
  user_login_finalize($form_state);
}

/**
 * Get the current logged in users stats.
 *
 * @param string $category
 *   The library systems user category for the current logged in user.
 * @param string $block
 *   Library blocking codes.
 *
 * @return bool|int
 *   1: user have the correct category
 *   0: user have a wrong category
 *   FALSE: some other error eg. blocked card, no connection to ding_provider,
 *          user is not alma_user
 *
 * @throws Exception
 */
function ting_ezproxy_user_status($category, $block) {
  // Try to get user credentials.
  $user_data = isset($_SESSION['ding_user']['user']) ? $_SESSION['ding_user']['user'] : array();

  // Default status to FALSE.
  $status = FALSE;

  // Check the user is in any categories.
  if (!empty($user_data['category'])) {
    // Have the user some blocks then vi return FALSE if this... ?
    if (isset($user_data['blocks']) && strlen($block)) {
      $block_list = explode(',', $block);
      $regexp = '/^(' . implode('|', preg_grep('/^\w+$/', $block_list)) . ')$/';
      foreach ($user_data['blocks'] as $ele) {
        if (!$ele['is_system'] && preg_match($regexp, $ele['code'])) {
          return FALSE;
        }
      }
    }

    // Make the regexp with allowed categories and check this.
    $catlist = explode(',', $category);
    $regexp = '/^(' . implode('|', preg_grep('/^\w+$/', $catlist)) . ')$/';

    $status = preg_match($regexp, $user_data['category']);
  }

  return $status;
}

/**
 * Generate an EZproxy ticket.
 *
 * @param string $url
 *   The url to generate ticket for.
 *
 * @see http://www.oclc.org/support/documentation/ezproxy/usr/ticket/php.htm
 *
 * @return string
 *   URL encoded with the ticket.
 */
function ting_ezproxy_generate_ticket($url) {
  global $user;

  // Get config values.
  $configuration = variable_get('ting_ezproxy', array());

  $packet = '$u' . time();
  if (strcmp($configuration['citizen'], "") != 0) {
    $packet .= '$g' . $configuration['citizen'];
  }
  $packet .= '$e';
  $ez_proxy_ticket = urlencode(md5($configuration['secret'] . $user->uid . $packet) . $packet);

  return $configuration['domain'] . "/login?user=" . urlencode($user->uid) . "&ticket=" . $ez_proxy_ticket . "&qurl=" . urlencode($url);
}
